//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль математической системы
// Подраздел: Подсистема 3D геометрии
// Группа: Трехмерные геометрические примитивы
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusGeometry3DSphere.cs
*		Структура для представления сферы в трехметрном пространстве.
*		Реализация структуры для представления сферы в трехметрном пространстве.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.01.2022
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
//=====================================================================================================================
namespace Lotus
{
	namespace Maths
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup MathGeometry3D
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Структура для представления сферы в трехметрном пространстве
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		[StructLayout(LayoutKind.Sequential)]
		public struct Sphere3Df : IEquatable<Sphere3Df>, IComparable<Sphere3Df>, ICloneable
		{
			#region ======================================= СТАТИЧЕСКИЕ ДАННЫЕ ========================================
			/// <summary>
			/// Текстовый формат отображения параметров сферы
			/// </summary>
			public static String ToStringFormat = "Center = {0:0.00}, {1:0.00}; Radius = {3:0.00}";
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			/// <summary>
			/// Центр сферы
			/// </summary>
			public Vector3Df Center;

			/// <summary>
			/// Радиус сферы
			/// </summary>
			public Single Radius;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует сферу указанными параметрами
			/// </summary>
			/// <param name="position">Центр сферы</param>
			/// <param name="radius">Радиус сферы</param>
			//---------------------------------------------------------------------------------------------------------
			public Sphere3Df(Vector3Df position, Single radius)
			{
				Center = position;
				Radius = radius;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует сфера указанной окружностью
			/// </summary>
			/// <param name="source">Сфера</param>
			//---------------------------------------------------------------------------------------------------------
			public Sphere3Df(Sphere3Df source)
			{
				Center = source.Center;
				Radius = source.Radius;
			}

#if (UNITY_2017_1_OR_NEWER)
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует сфера указанными параметрами
			/// </summary>
			/// <param name="center">Центр сферы</param>
			/// <param name="radius">Радиус сферы</param>
			//---------------------------------------------------------------------------------------------------------
			public Sphere3Df(UnityEngine.Vector3 center, Single radius)
			{
				Center = new Vector3Df(center.x, center.y, center.z);
				Radius = radius;
			}
#endif
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверяет равен ли текущий объект другому объекту того же типа
			/// </summary>
			/// <param name="obj">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Boolean Equals(Object obj)
			{
				if (obj != null)
				{
					if (typeof(Sphere3Df) == obj.GetType())
					{
						Sphere3Df sphere = (Sphere3Df)obj;
						return Equals(sphere);
					}
				}
				return base.Equals(obj);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка равенства сфер по значению
			/// </summary>
			/// <param name="other">Сравниваемая сфера</param>
			/// <returns>Статус равенства сфер</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean Equals(Sphere3Df other)
			{
				return this == other;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение сфер для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый сфера</param>
			/// <returns>Статус сравнения сфер</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(Sphere3Df other)
			{
				if (Center > other.Center)
				{
					return 1;
				}
				else
				{
					if (Center == other.Center && Radius > other.Radius)
					{
						return 1;
					}
					else
					{
						return 0;
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение хеш-кода сферы
			/// </summary>
			/// <returns>Хеш-код сферы</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Int32 GetHashCode()
			{
				return (Center.GetHashCode() ^ Radius.GetHashCode());
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Полное копирование сферы
			/// </summary>
			/// <returns>Копия сферы</returns>
			//---------------------------------------------------------------------------------------------------------
			public Object Clone()
			{
				return MemberwiseClone();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление сферы с указанием значений</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return String.Format(ToStringFormat, Center.X, Center.Y, Radius);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <param name="format">Формат отображения</param>
			/// <returns>Текстовое представление сферы с указанием значений</returns>
			//---------------------------------------------------------------------------------------------------------
			public String ToString(String format)
			{
				return "Center = " + Center.ToString(format) + "; Radius = " + Radius.ToString(format);
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ =================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение сфер на равенство
			/// </summary>
			/// <param name="left">Первая сфера</param>
			/// <param name="right">Вторая сфера</param>
			/// <returns>Статус равенства сфер</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator ==(Sphere3Df left, Sphere3Df right)
			{
				return left.Center == right.Center && left.Radius == right.Radius;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение сфер на неравенство
			/// </summary>
			/// <param name="left">Первая сфера</param>
			/// <param name="right">Вторая сфера</param>
			/// <returns>Статус неравенства сфер</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator !=(Sphere3Df left, Sphere3Df right)
			{
				return left.Center != right.Center || left.Radius != right.Radius;
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на попадание точки в область сферы
			/// </summary>
			/// <param name="point">Проверяемая точка</param>
			/// <returns>Статус попадания</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean Contains(Vector3Df point)
			{
				Single d = Vector3Df.Distance(ref Center, ref point);
				return (Math.Abs(d - Radius) < XGeometry3D.Eplsilon_f);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================