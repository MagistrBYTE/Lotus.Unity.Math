//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль математической системы
// Подраздел: Подсистема генерации псевдослучайных значений
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusMathRandomGenerators.cs
*		Набор различных генератор псевдослучайных значений.
*		Реализация генератор псевдослучайных значений по различным, наиболее распространенными алгоритмами генерации
*	случайных значений.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Collections.Generic;
//=====================================================================================================================
namespace Lotus
{
	namespace Maths
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup MathRandom
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Стандартный генератор .NET псевдослучайных значений
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CRandomStandard : ILotusRandom
		{
			#region ======================================= ДАННЫЕ ====================================================
			internal System.Random mRandom;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CRandomStandard()
			{
				mRandom = new Random(System.Environment.TickCount);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="seed">Начальное значение генератора</param>
			//---------------------------------------------------------------------------------------------------------
			public CRandomStandard(Int32 seed)
			{
				mRandom = new Random(seed);
			}
			#endregion

			#region ======================================= МЕТОДЫ ILotusRandom =======================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - 1]
			/// </summary>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public Single NextSingle()
			{
				return (Single)mRandom.NextDouble();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - max]
			/// </summary>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public Single NextSingle(Single max)
			{
				return (Single)mRandom.NextDouble() * max;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [min - max]
			/// </summary>
			/// <param name="min">Минимальное число</param>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public Single NextSingle(Single min, Single max)
			{
				return min + (Single)mRandom.NextDouble() * (max - min);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - 4294967295]
			/// </summary>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public UInt32 NextInteger()
			{
				return (UInt32)mRandom.Next(0, Int32.MaxValue);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - max]
			/// </summary>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public UInt32 NextInteger(UInt32 max)
			{
				return (UInt32)mRandom.Next((Int32)max);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [min - max]
			/// </summary>
			/// <param name="min">Минимальное число</param>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public UInt32 NextInteger(UInt32 min, UInt32 max)
			{
				return (UInt32)mRandom.Next((Int32)min, (Int32)max);
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Генератор псевдослучайных значений - Вихрь Мерсенна
		/// </summary>
		/// <remarks>
		/// https://ru.wikipedia.org/wiki/Вихрь_Мерсенна
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public class CRandomMersenneTwister : ILotusRandom
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Size parameters
			/// </summary>
			private const Int16 SIZE = 624;

			/// <summary>
			/// Period parameters
			/// </summary>
			private const Int16 PERIOD = 397;

			/// <summary>
			/// Constant vector a
			/// </summary>
			private const UInt32 MATRIX_A = (UInt32)0x9908b0df;

			/// <summary>
			/// Most significant w-r bits
			/// </summary>
			private const UInt32 UPPER_MASK = (UInt32)0x80000000;

			/// <summary>
			/// Least significant r bits
			/// </summary>
			private const UInt32 LOWER_MASK = (UInt32)0x7fffffff;

			/// <summary>
			/// Коэффициент перевода в вещественное число
			/// </summary>
			private const Single TO_SINGLE_COEFF = (Single)1.0f / (Single)UInt32.MaxValue;

			/// <summary>
			/// Array for the state vector
			/// </summary>
			private readonly UInt32[] MASSIVE = new UInt32[SIZE];

			/// <summary>
			/// Magic number
			/// </summary>
			private readonly UInt32[] MAG_01 = new UInt32[] { 0, MATRIX_A };
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			private UInt16 mMti;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CRandomMersenneTwister()
			{
				mMti = SIZE + 1;

				// auto generate seed for .NET
				UInt32[] seed_key = new UInt32[6];
				Byte[] rnseed = new Byte[8];

				seed_key[0] = (UInt32)System.DateTime.UtcNow.Millisecond;
				seed_key[1] = (UInt32)System.DateTime.UtcNow.Second;
				seed_key[2] = (UInt32)System.DateTime.UtcNow.DayOfYear;
				seed_key[3] = (UInt32)System.DateTime.UtcNow.Year;

				System.Security.Cryptography.RandomNumberGenerator rn =
					System.Security.Cryptography.RandomNumberGenerator.Create();
				rn.GetNonZeroBytes(rnseed);

				seed_key[4] = ((UInt32)rnseed[0] << 24) | ((UInt32)rnseed[1] << 16)
					| ((UInt32)rnseed[2] << 8) | (UInt32)rnseed[3];
				seed_key[5] = ((UInt32)rnseed[4] << 24) | ((UInt32)rnseed[5] << 16)
					| ((UInt32)rnseed[6] << 8) | (UInt32)rnseed[7];

				InitFromArray(seed_key);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="seed">Начальное значение генератора</param>
			//---------------------------------------------------------------------------------------------------------
			public CRandomMersenneTwister(UInt32 seed)
			{
				mMti = SIZE + 1;
				InitGenrand(seed);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="init_key">Начальное значение генератора</param>
			//---------------------------------------------------------------------------------------------------------
			public CRandomMersenneTwister(UInt32[] init_key)
			{
				mMti = SIZE + 1;
				InitFromArray(init_key);
			}
			#endregion

			#region ======================================= МЕТОДЫ ILotusRandom =======================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - 1]
			/// </summary>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public Single NextSingle()
			{
				return GenerateInt32() * TO_SINGLE_COEFF;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - max]
			/// </summary>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public Single NextSingle(Single max)
			{
				return GenerateInt32() * TO_SINGLE_COEFF * max;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [min - max]
			/// </summary>
			/// <param name="min">Минимальное число</param>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public Single NextSingle(Single min, Single max)
			{
				Single delta = max - min;
				return min + GenerateInt32() * TO_SINGLE_COEFF * delta;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - 4294967295]
			/// </summary>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public UInt32 NextInteger()
			{
				return GenerateInt32();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - max]
			/// </summary>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public UInt32 NextInteger(UInt32 max)
			{
				return GenerateInt32() % max;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [min - max]
			/// </summary>
			/// <param name="min">Минимальное число</param>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public UInt32 NextInteger(UInt32 min, UInt32 max)
			{
				UInt32 delta = max - min;
				return min + GenerateInt32() % delta;
			}
			#endregion

			#region ======================================= МЕТОДЫ ИНИЦИАЛИЗАЦИИ ======================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Инициализация данных генератора
			/// </summary>
			/// <param name="seed">Начальное значение</param>
			//---------------------------------------------------------------------------------------------------------
			private void InitGenrand(UInt32 seed)
			{
				MASSIVE[0] = seed;

				for (mMti = 1; mMti < SIZE; mMti++)
				{
					MASSIVE[mMti] = (UInt32)1812433253 * (MASSIVE[mMti - 1] ^ (MASSIVE[mMti - 1] >> 30)) + mMti;
					/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
					/* In the previous versions, MSBs of the seed affect   */
					/* only MSBs of the array mt[].                        */
					/* 2002/01/09 modified by Makoto Matsumoto             */
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Инициализация данных генератора
			/// </summary>
			/// <param name="init_key">Массив</param>
			//---------------------------------------------------------------------------------------------------------
			private void InitFromArray(UInt32[] init_key)
			{
				UInt32 i, j;
				Int32 k;
				Int32 key_length = init_key.Length;

				InitGenrand(19650218);
				i = 1; j = 0;
				k = SIZE > key_length ? SIZE : key_length;

				for (; k > 0; k--)
				{
					MASSIVE[i] = (MASSIVE[i] ^ ((MASSIVE[i - 1] ^ (MASSIVE[i - 1] >> 30)) * (UInt32)1664525))
						+ init_key[j] + (UInt32)j; /* non linear */
					i++; j++;
					if (i >= SIZE) { MASSIVE[0] = MASSIVE[SIZE - 1]; i = 1; }
					if (j >= key_length) j = 0;
				}
				for (k = SIZE - 1; k > 0; k--)
				{
					MASSIVE[i] = (MASSIVE[i] ^ ((MASSIVE[i - 1] ^ (MASSIVE[i - 1] >> 30)) * (UInt32)1566083941))
						- (UInt32)i; /* non linear */
					i++;
					if (i >= SIZE) { MASSIVE[0] = MASSIVE[SIZE - 1]; i = 1; }
				}

				MASSIVE[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Генерация псевдослучайного целого числа в интервале [0 - 4294967295]
			/// </summary>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public UInt32 GenerateInt32()
			{
				UInt32 y;

				if (mMti >= SIZE)
				{ 
					/* generate N words at one time */
					Int16 kk;

					if (mMti == SIZE + 1)   /* if init_genrand() has not been called, */
						InitGenrand(5489); /* a default initial seed is used */

					for (kk = 0; kk < SIZE - PERIOD; kk++)
					{
						y = ((MASSIVE[kk] & UPPER_MASK) | (MASSIVE[kk + 1] & LOWER_MASK)) >> 1;
						MASSIVE[kk] = MASSIVE[kk + PERIOD] ^ MAG_01[MASSIVE[kk + 1] & 1] ^ y;
					}
					for (; kk < SIZE - 1; kk++)
					{
						y = ((MASSIVE[kk] & UPPER_MASK) | (MASSIVE[kk + 1] & LOWER_MASK)) >> 1;
						MASSIVE[kk] = MASSIVE[kk + (PERIOD - SIZE)] ^ MAG_01[MASSIVE[kk + 1] & 1] ^ y;
					}
					y = ((MASSIVE[SIZE - 1] & UPPER_MASK) | (MASSIVE[0] & LOWER_MASK)) >> 1;
					MASSIVE[SIZE - 1] = MASSIVE[PERIOD - 1] ^ MAG_01[MASSIVE[0] & 1] ^ y;

					mMti = 0;
				}

				y = MASSIVE[mMti++];

				/* Tempering */
				y ^= y >> 11;
				y ^= (y << 7) & 0x9d2c5680;
				y ^= (y << 15) & 0xefc60000;
				y ^= y >> 18;

				return y;
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Генератор псевдослучайных значений основанный на сдвигах
		/// </summary>
		/// <remarks>
		/// Implementation of the Ranq1 struct found in Numerical Recipes in C: 3rd Edition. 
		/// Combined generator (Ranq1 = D1(A1(right-shift first))with a period of 1.8 x 10^19.
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public class CRandomShift : ILotusRandom
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Recommended multiplier for D1 method
			/// </summary>
			private const Int64 A = 2685821657736338717L;

			/// <summary>
			/// First bit shift value
			/// </summary>
			private const Int32 A1 = 21;

			/// <summary>
			/// Second bit shift value
			/// </summary>
			private const Int32 A2 = 35;

			/// <summary>
			/// Third bit shift value
			/// </summary>
			private const Int32 A3 = 4;

			/// <summary>
			/// Initialization value
			/// </summary>
			private const Int64 M = 4101842887655102017L;

			/// <summary>
			/// Коэффициент перевода в вещественное число
			/// </summary>
			private const Single TO_SINGLE_COEFF = (Single)1.0f / (Single)UInt32.MaxValue;
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			/// <summary>
			/// Current state of the random number generation
			/// </summary>
			private UInt32 mValue;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Constructs a new random number generator with the current system time as seed
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CRandomShift()
				: this((UInt32)DateTime.Now.Ticks)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Constructs a new random number generator with the given 32-bit unsigned integer as seed
			/// </summary>
			/// <param name="seed">32-bit unsigned integer to use as seed</param>
			//---------------------------------------------------------------------------------------------------------
			public CRandomShift(UInt32 seed)
			{
				this.mValue = (UInt32)(M ^ seed);
				this.mValue = NextInteger();
			}
			#endregion

			#region ======================================= МЕТОДЫ ILotusRandom =======================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - 1]
			/// </summary>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public Single NextSingle()
			{
				return NextInteger() * TO_SINGLE_COEFF;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - max]
			/// </summary>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public Single NextSingle(Single max)
			{
				return NextInteger() * TO_SINGLE_COEFF * max;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [min - max]
			/// </summary>
			/// <param name="min">Минимальное число</param>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public Single NextSingle(Single min, Single max)
			{
				Single delta = max - min;
				return min + NextInteger() * TO_SINGLE_COEFF * delta;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - 4294967295]
			/// </summary>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public UInt32 NextInteger()
			{
				this.mValue ^= this.mValue >> A1;
				this.mValue ^= this.mValue << A2;
				this.mValue ^= this.mValue >> A3;

				return (UInt32)(this.mValue * A);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [0 - max]
			/// </summary>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public UInt32 NextInteger(UInt32 max)
			{
				return NextInteger() % max;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получиться следующие псевдослучайное число в диапазоне [min - max]
			/// </summary>
			/// <param name="min">Минимальное число</param>
			/// <param name="max">Максимальное число</param>
			/// <returns>Псевдослучайное число</returns>
			//---------------------------------------------------------------------------------------------------------
			public UInt32 NextInteger(UInt32 min, UInt32 max)
			{
				UInt32 delta = max - min;
				return min + NextInteger() % delta;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================