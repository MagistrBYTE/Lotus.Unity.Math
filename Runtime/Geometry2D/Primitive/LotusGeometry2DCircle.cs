//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль математической системы
// Подраздел: Подсистема 2D геометрии
// Группа: Двухмерные геометрические примитивы
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusGeometry2DCircle.cs
*		Структура для представления окружности в двухмерном пространстве.
*		Реализация структуры для представления окружности в двухмерном пространстве.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Globalization;
//=====================================================================================================================
namespace Lotus
{
	namespace Maths
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup MathGeometry2D
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Структура окружности в двухмерном пространстве
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		[StructLayout(LayoutKind.Sequential)]
		public struct Circle2Df : IEquatable<Circle2Df>, IComparable<Circle2Df>, ICloneable
		{
			#region ======================================= СТАТИЧЕСКИЕ ДАННЫЕ ========================================
			/// <summary>
			/// Текстовый формат отображения параметров окружности
			/// </summary>
			public static String ToStringFormat = "Center = {0:0.00}, {1:0.00}; Radius = {3:0.00}";
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			/// <summary>
			/// Центр окружности
			/// </summary>
			public Vector2Df Center;

			/// <summary>
			/// Радиус окружности
			/// </summary>
			public Single Radius;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Длина окружности
			/// </summary>
			public Single Circumference
			{
				get { return (Radius * XMath.PI_2f); }
				set
				{
					Radius = value / XMath.PI_2f;
				}
			}

			/// <summary>
			/// Диаметр окружности
			/// </summary>
			public Single Diameter
			{
				get { return 2 * Radius; }
				set { Radius = value / 2; }
			}

			/// <summary>
			/// Площадь окружности
			/// </summary>
			public Single Area
			{
				get { return XMath.PI_f * Radius * Radius; }
				set { Radius = XMath.Sqrt(value / XMath.PI_f); }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует окружность указанными параметрами
			/// </summary>
			/// <param name="center">Центр окружности</param>
			/// <param name="radius">Радиус окружности</param>
			//---------------------------------------------------------------------------------------------------------
			public Circle2Df(Vector2Df center, Single radius)
			{
				Center = center;
				Radius = radius;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует окружность указанной окружностью
			/// </summary>
			/// <param name="source">Окружность</param>
			//---------------------------------------------------------------------------------------------------------
			public Circle2Df(Circle2Df source)
			{
				Center = source.Center;
				Radius = source.Radius;
			}

#if (UNITY_2017_1_OR_NEWER)
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует окружность указанными параметрами
			/// </summary>
			/// <param name="center">Центр окружности</param>
			/// <param name="radius">Радиус окружности</param>
			//---------------------------------------------------------------------------------------------------------
			public Circle2Df(UnityEngine.Vector2 center, Single radius)
			{
				Center = new Vector2Df(center.x, center.y);
				Radius = radius;
			}
#endif
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверяет равен ли текущий объект другому объекту того же типа
			/// </summary>
			/// <param name="obj">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Boolean Equals(Object obj)
			{
				if (obj != null)
				{
					if (typeof(Circle2Df) == obj.GetType())
					{
						Circle2Df circle = (Circle2Df)obj;
						return Equals(circle);
					}
				}
				return base.Equals(obj);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка равенства окружностей по значению
			/// </summary>
			/// <param name="other">Сравниваемая окружность</param>
			/// <returns>Статус равенства окружностей</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean Equals(Circle2Df other)
			{
				return this == other;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение окружностей для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый окружность</param>
			/// <returns>Статус сравнения окружностей</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(Circle2Df other)
			{
				if (Center > other.Center)
				{
					return 1;
				}
				else
				{
					if (Center == other.Center && Radius > other.Radius)
					{
						return 1;
					}
					else
					{
						return 0;
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение хеш-кода окружности
			/// </summary>
			/// <returns>Хеш-код окружности</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Int32 GetHashCode()
			{
				return (Center.GetHashCode() ^ Radius.GetHashCode());
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Полное копирование окружности
			/// </summary>
			/// <returns>Копия окружности</returns>
			//---------------------------------------------------------------------------------------------------------
			public Object Clone()
			{
				return MemberwiseClone();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление окружности с указанием значений</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return String.Format(ToStringFormat, Center.X, Center.Y, Radius);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <param name="format">Формат отображения</param>
			/// <returns>Текстовое представление окружности с указанием значений</returns>
			//---------------------------------------------------------------------------------------------------------
			public String ToString(String format)
			{
				return "Center = " + Center.ToString(format) + "; Radius = " + Radius.ToString(format);
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ =================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение окружностей на равенство
			/// </summary>
			/// <param name="left">Первая окружность</param>
			/// <param name="right">Вторая окружность</param>
			/// <returns>Статус равенства окружностей</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator ==(Circle2Df left, Circle2Df right)
			{
				return left.Center == right.Center && left.Radius == right.Radius;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение окружностей на неравенство
			/// </summary>
			/// <param name="left">Первая окружность</param>
			/// <param name="right">Вторая окружность</param>
			/// <returns>Статус неравенства окружностей</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator !=(Circle2Df left, Circle2Df right)
			{
				return left.Center != right.Center || left.Radius != right.Radius;
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на попадание точки в область окружности
			/// </summary>
			/// <param name="point">Проверяемая точка</param>
			/// <returns>Статус попадания</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean Contains(Vector2Df point)
			{
				Single d = Vector2Df.Distance(ref Center, ref point);
				return (Math.Abs(d - Radius) < XGeometry2D.Eplsilon_f);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================