//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль математической системы
// Подраздел: Подсистема 2D геометрии
// Группа: Двухмерные геометрические примитивы
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusGeometry2DLine.cs
*		Структура для представления линии в двухмерном пространстве.
*		Реализация структуры для представления линии в двухмерном пространстве.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Globalization;
//=====================================================================================================================
namespace Lotus
{
	namespace Maths
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup MathGeometry2D
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Структура линии в двухмерном пространстве
		/// </summary>
		/// <remarks>
		/// Линия представляют собой точку и направление, при этом направление рассматривается в обе стороны
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		[StructLayout(LayoutKind.Sequential)]
		public struct Line2Df : IEquatable<Line2Df>, IComparable<Line2Df>, ICloneable
		{
			#region ======================================= СТАТИЧЕСКИЕ ДАННЫЕ ========================================
			/// <summary>
			/// Текстовый формат отображения параметров линии
			/// </summary>
			public static String ToStringFormat = "Pos = {0:0.00}, {1:0.00}; Dir = {2:0.00}, {3:0.00}";

			/// <summary>
			/// Горизонтальная ось
			/// </summary>
			public readonly static Line2Df X_Axis = new Line2Df(Vector2Df.Zero, Vector2Df.Right);

			/// <summary>
			/// Вертикальная ось
			/// </summary>
			public readonly static Line2Df Y_Axis = new Line2Df(Vector2Df.Zero, Vector2Df.Up);
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			/// <summary>
			/// Позиция линии
			/// </summary>
			public Vector2Df Position;

			/// <summary>
			/// Направление линии
			/// </summary>
			public Vector2Df Direction;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует линию указанными параметрами
			/// </summary>
			/// <param name="pos">Позиция линии</param>
			/// <param name="dir">Направление линии</param>
			//---------------------------------------------------------------------------------------------------------
			public Line2Df(Vector2Df pos, Vector2Df dir)
			{
				Position = pos;
				Direction = dir;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует линию указанной линией
			/// </summary>
			/// <param name="source">Линия</param>
			//---------------------------------------------------------------------------------------------------------
			public Line2Df(Line2Df source)
			{
				Position = source.Position;
				Direction = source.Direction;
			}

#if (UNITY_2017_1_OR_NEWER)
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует линию указанными параметрами
			/// </summary>
			/// <param name="pos">Позиция линии</param>
			/// <param name="dir">Направление линии</param>
			//---------------------------------------------------------------------------------------------------------
			public Line2Df(UnityEngine.Vector2 pos, UnityEngine.Vector2 dir)
			{
				Position = new Vector2Df(pos.x, pos.y);
				Direction = new Vector2Df(dir.x, dir.y);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует линию указанным лучом
			/// </summary>
			/// <param name="ray">Луч</param>
			//---------------------------------------------------------------------------------------------------------
			public Line2Df(UnityEngine.Ray2D ray)
			{
				Position = new Vector2Df(ray.origin.x, ray.origin.y);
				Direction = new Vector2Df(ray.direction.x, ray.direction.y);
			}
#endif
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверяет равен ли текущий объект другому объекту того же типа
			/// </summary>
			/// <param name="obj">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Boolean Equals(Object obj)
			{
				if (obj != null)
				{
					if (typeof(Line2Df) == obj.GetType())
					{
						Line2Df line = (Line2Df)obj;
						return Equals(line);
					}
				}
				return base.Equals(obj);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка равенства линий по значению
			/// </summary>
			/// <param name="other">Сравниваемая линия</param>
			/// <returns>Статус равенства линий</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean Equals(Line2Df other)
			{
				return this == other;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение линий для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый линия</param>
			/// <returns>Статус сравнения линий</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(Line2Df other)
			{
				if (Position > other.Position)
				{
					return 1;
				}
				else
				{
					if (Position == other.Position && Direction > other.Direction)
					{
						return 1;
					}
					else
					{
						return 0;
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение хеш-кода линии
			/// </summary>
			/// <returns>Хеш-код линии</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Int32 GetHashCode()
			{
				return (Position.GetHashCode() ^ Direction.GetHashCode());
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Полное копирование линии
			/// </summary>
			/// <returns>Копия линии</returns>
			//---------------------------------------------------------------------------------------------------------
			public Object Clone()
			{
				return MemberwiseClone();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление линии с указанием значений</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return String.Format(ToStringFormat, Position.X, Position.Y, Direction.X, Direction.Y);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <param name="format">Формат отображения</param>
			/// <returns>Текстовое представление линии с указанием значений</returns>
			//---------------------------------------------------------------------------------------------------------
			public String ToString(String format)
			{
				return "Pos = " + Position.ToString(format) + "; Dir = " + Direction.ToString(format);
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ =================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение линий на равенство
			/// </summary>
			/// <param name="left">Первая линия</param>
			/// <param name="right">Вторая линия</param>
			/// <returns>Статус равенства линий</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator ==(Line2Df left, Line2Df right)
			{
				return left.Position == right.Position && left.Direction == right.Direction;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение линий на неравенство
			/// </summary>
			/// <param name="left">Первая линия</param>
			/// <param name="right">Вторая линия</param>
			/// <returns>Статус неравенства линий</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator !=(Line2Df left, Line2Df right)
			{
				return left.Position != right.Position || left.Direction != right.Direction;
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ ПРЕОБРАЗОВАНИЯ ==================================
#if (UNITY_2017_1_OR_NEWER)
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="UnityEngine.Ray2D"/>
			/// </summary>
			/// <param name="line">Линия</param>
			/// <returns>Объект <see cref="UnityEngine.Ray2D"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator UnityEngine.Ray2D(Line2Df line)
			{
				return new UnityEngine.Ray2D(line.Position, line.Direction);
			}
#endif
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение точки на линии
			/// </summary>
			/// <param name="position">Позиция точки от начала линии</param>
			/// <returns>Точка на линии</returns>
			//---------------------------------------------------------------------------------------------------------
			public Vector2Df GetPoint(Single position)
			{
				return Position + (Direction * position);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка параметров линии
			/// </summary>
			/// <param name="start_point">Начальная точка</param>
			/// <param name="end_point">Конечная точка</param>
			//---------------------------------------------------------------------------------------------------------
			public void SetFromPoint(Vector2Df start_point, Vector2Df end_point)
			{
				Position = start_point;
				Direction = (end_point - start_point).Normalized;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================